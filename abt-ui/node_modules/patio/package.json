{
  "name": "patio",
  "description": "Patio query engine and ORM",
  "version": "0.1.5",
  "keywords": [
    "ORM",
    "object relation mapper",
    "relational",
    "mapper",
    "moose",
    "mysql",
    "MySQL",
    "MySql",
    "SQL",
    "sql",
    "query",
    "database",
    "dataset",
    "transactions",
    "DDl",
    "Sequel",
    "migrations"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:c2fo/patio.git"
  },
  "homepage": "http://c2fo.github.com/patio/index.html",
  "author": {
    "name": "Doug Martin",
    "url": "http://c2fo.github.com"
  },
  "main": "index.js",
  "dependencies": {
    "mysql": "2.0.0-alpha2",
    "pg": "0.7.2",
    "comb": ">=0.1.8",
    "comb-proxy": ">=0.0.3",
    "hive-cache": "0.0.3",
    "commander": "0.5.1",
    "validator": "~0.4.11"
  },
  "scripts": {
    "test": "make test-travis"
  },
  "devDependencies": {
    "it": "0.0.5"
  },
  "directories": {
    "lib": "lib"
  },
  "bin": {
    "patio": "./bin/patio"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/C2FO/patio.png)](http://travis-ci.org/C2FO/patio)\n#[Patio](http://c2fo.github.com/patio)\n\nPatio is a <a href=\"http://sequel.rubyforge.org/\" target=\"patioapi\">Sequel</a> inspired query engine.                                                        \n                                                                                                                                                             \n###Why Use Patio?\n                                                                                                                                                             \nPatio is different because it allows the developers to choose the level of abtraction they are comfortable with.                                             \n\nIf you want to use [ORM](http://c2fo.github.com/patio/models.html) functionality you can. If you dont you can just use the [Database](http://c2fo.github.com/patio/DDL.html) and [Datasets](http://c2fo.github.com/patio/querying.html) as a querying API, and if you need toyou can [write plain SQL](http://c2fo.github.com/patio/patio_Database.html#run)\n                                                                                                                                                                                                                                                                                                                         \n###Installation\nTo install patio run                                                                                                                                         \n                                                                                                                                                             \n`npm install comb patio`\n                                                                                                                                                             \nIf you want to use the patio executable for migrations\n                                                                                                                                                             \n`npm install -g patio`\nn###Getting Started  \n\n\nCreate some tables.\n                                                                                                                      \n```javascript                                                                                                                                    \nvar patio = require(\"patio\"),                                                                                                    \n     comb = require(\"comb\"),                                                                                                           \n     when = comb.when,                                                                                                                 \n     serial = comb.serial;                                                                                                             \n                                                                                                                                       \n                                                                                                                                       \n //set all db name to camelize                                                                                                         \n patio.camelize = true;                                                                                                                \n patio.configureLogging();                                                                                                             \n //connect to the db                                                                                                                   \n var DB = patio.connect(<CONNECTION_URI>);                                                                                       \n                                                                                                                                       \nfunction errorHandler(error) {                                                                                                 \n     console.log(error);                                                                                                               \n     patio.disconnect();                                                                                                               \n };                                                                                                                                    \n                                                                                                                                       \nfunction createTables() {\n    return comb.serial([\n        function () {\n            return DB.forceDropTable([\"capital\", \"state\"]);\n        },\n        function () {\n            return DB.createTable(\"state\", function () {\n                this.primaryKey(\"id\");\n                this.name(String)\n                this.population(\"integer\");\n                this.founded(Date);\n                this.climate(String);\n                this.description(\"text\");\n            });\n        },\n        function () {\n            return DB.createTable(\"capital\", function () {\n                this.primaryKey(\"id\");\n                this.population(\"integer\");\n                this.name(String);\n                this.founded(Date);\n                this.foreignKey(\"stateId\", \"state\", {key:\"id\"});\n            });\n        }\n    ]);\n};                                                                                               \n                                                                                                                                       \n createTables().then(function () {                                                                                                     \n    patio.disconnect();                                                                                                                 \n}, errorHandler);                                                                                                                      \n```   \n\nNext lets create some models for the tables created.\n\n```javascript\nvar State = patio.addModel(\"state\", {\n    static:{\n        init:function () {\n            this._super(arguments);\n            this.oneToOne(\"capital\");\n        }\n    }\n});\nvar Capital = patio.addModel(\"capital\", {\n    static:{\n        init:function () {\n            this._super(arguments);\n            this.manyToOne(\"state\");\n        }\n    }\n});\n```\n\nNext you'll need to sync your models\n\n```javascript\npatio.syncModels();\n```\n\nUse your models.\n\n```javascript\n//comb.when waits for the save operta\nreturn comb.when(\n\tState.save({\n        name:\"Nebraska\",\n        population:1796619,\n        founded:new Date(1867, 2, 4),\n        climate:\"continental\",\n        capital:{\n            name:\"Lincoln\",\n            founded:new Date(1856, 0, 1),\n            population:258379\n        }\n    }),\n    Capital.save({\n        name:\"Austin\",\n        founded:new Date(1835, 0, 1),\n        population:790390,\n        state:{\n            name:\"Texas\",\n            population:25674681,\n            founded:new Date(1845, 11, 29)\n        }\n    })\n);\n```\n\nNow we can query the states and capitals we created.\n\n```javascript\nState.order(\"name\").forEach(function (state) {\n\t//if you return a promise here it will prevent the foreach from\n\t//resolving until all inner processing has finished.\n\treturn state.capital.then(function (capital) {\n    \tconsole.log(\"%s's capital is %s.\", state.name, capital.name);\n\t});\n});\n```\n\n```javascript\nCapital.order(\"name\").forEach(function (capital) {\n\t//if you return a promise here it will prevent the foreach from\n\t//resolving until all inner processing has finished.\n\treturn capital.state.then(function (state) {\n\t\tconsole.log(comb.string.format(\"%s is the capital of %s.\", capital.name, state.name));\n\t});\n});\n```\n\n###Features\n                                                                                                                                                                                                                                                                                                          \n* Comprehensive documentation with examples.\n* &gt; 80% test coverage\n* Support for connection URIs\n* Supported Databases                                                                                                                                        \n  * MySQL\n  * Postgres\n* [Models](http://c2fo.github.com/patio/models.html)\n  * [Associations](http://c2fo.github.com/patio/associations.html)\n  * [Inheritance](http://c2fo.github.com/patio/model-inheritance.html)\n  * [Validation](http://c2fo.github.com/patio/validation.html)\n  * [Plugins](http://c2fo.github.com/patio/plugins.html)\n* Simple adapter extensions\n* [Migrations](http://c2fo.github.com/patio/migrations.html)\n  * Integer and Timestamp based.\n* Powerful [Querying](http://c2fo.github.com/patio/querying.html) API\n* [Transactions](http://c2fo.github.com/patio/patio_Database.html#transaction) with\n  * Savepoints\n  * Isolation Levels\n  * Two phase commits\n* SQL Datatype casting\n* Full database CRUD operations                                                                                                                           \n  * [createTable](http://c2fo.github.com/patio/patio_Database.html#createTable)\n  * [alterTable](http://c2fo.github.com/patio/patio_Database.html#alterTable)\n  * [dropTable](http://c2fo.github.com/patio/patio_Database.html#dropTable)\n  * [insert](http://c2fo.github.com/patio/patio_Dataset.html#insert)\n  * [multiInsert](http://c2fo.github.com/patio/patio_Dataset.html#multiInsert)\n  * [update](http://c2fo.github.com/patio/patio_Dataset.html#update)\n  * [remove](http://c2fo.github.com/patio/patio_Dataset.html#remove)\n  * [query](http://c2fo.github.com/patio/patio_Dataset.html#filter)\n\n\n\n                                                                                                                                   ",
  "_id": "patio@0.1.5",
  "_from": "patio@*"
}
